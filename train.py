# -*- coding: utf-8 -*-
"""Untitled50.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LWTw4YSMpS2TDak06dlVttu34u-7KSi6
"""

!pip install ucimlrepo

# train.py
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import joblib
from ucimlrepo import fetch_ucirepo

# Fetch dataset
concrete_data = fetch_ucirepo(id=165)
X = concrete_data.data.features
y = concrete_data.data.targets

# Combine into one DataFrame
df = pd.concat([X, y], axis=1)
df.columns = [
    'Cement', 'Slag', 'Fly Ash', 'Water', 'Superplasticizer',
    'Coarse Aggregate', 'Fine Aggregate', 'Age', 'Strength'
]

# Prepare features & target
X = df.drop('Strength', axis=1)
y = df['Strength']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ===== Linear Regression =====
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

# ===== Random Forest =====
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# ===== Neural Network =====
mlp = MLPRegressor(hidden_layer_sizes=(64, 64), activation='relu',
                   solver='adam', max_iter=1000, random_state=42)
mlp.fit(X_train_scaled, y_train)

# Save models & scaler
joblib.dump(lr, "linear_regression.pkl")
joblib.dump(rf, "random_forest.pkl")
joblib.dump(mlp, "neural_network.pkl")
joblib.dump(scaler, "scaler.pkl")

print("âœ… Models and scaler saved successfully!")

# Only run this once to save the dataset
from ucimlrepo import fetch_ucirepo
import pandas as pd

concrete_data = fetch_ucirepo(id=165)
df = pd.concat([concrete_data.data.features, concrete_data.data.targets], axis=1)
df.to_csv("concrete_data.csv", index=False)

